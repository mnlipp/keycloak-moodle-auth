/*
 * This file is part of the Keycloak Moodle authenticator
 * Copyright (C) 2024 Michael N. Lipp
 *
 * This program is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 3 of the License, or 
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along 
 * with this program; if not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    // Apply the common versioning conventions.
    // Put this at the start, because accessing project.version before
    // this is applied makes things fail.
    id 'org.jdrupes.versioning-conventions'

    // Apply the java Plugin to add support for Java.
    id 'java'
    
    // Apply eclipse plugin
    id 'eclipse'
    
    // Access to git information
    id 'org.ajoberstar.grgit'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    constraints {
        // Define dependency versions as constraints
        // implementation 'org.apache.commons:commons-text:1.9'
    }
}

// Configure sensible layout
sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['resources']
        }
    }

    test {
        java {
            srcDirs = ['test']
        }
        resources {
            srcDirs = ['test-resources']
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jar {
    manifest {
        def matchExpr = [ "*" ]
        
        inputs.property("gitDescriptor",
            { grgit.describe(always: true, match: matchExpr) })
        
        // Set Git revision information in the manifests of built bundles
        def gitDesc = grgit.describe(always: true, match: matchExpr)
        attributes([
            "Implementation-Title": project.name,
            "Implementation-Version": "$project.version (built from ${gitDesc})",
            "Implementation-Vendor": grgit.repository.jgit.repository.config.getString("user", null, "name")
                + " (" + grgit.repository.jgit.repository.config.getString("user", null, "email") + ")",
            "Git-Descriptor": gitDesc,
            "Git-SHA": grgit.head().id,
        ])
    }
}

eclipse {

    project {
        file {
            // closure executed after .project content is loaded from existing file
            // and before gradle build information is merged
            beforeMerged { project ->
                project.natures.clear()
                project.buildCommands.clear()
            }

            project.natures += 'org.eclipse.buildship.core.gradleprojectnature'
            project.buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'

            if (plugins.hasPlugin('java')) {
                project.buildCommand 'org.eclipse.jdt.core.javabuilder'
                project.natures += 'net.sf.eclipsecs.core.CheckstyleNature'
                project.buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
                project.natures += 'ch.acanda.eclipse.pmd.builder.PMDNature'
                project.buildCommand 'ch.acanda.eclipse.pmd.builder.PMDBuilder'
            }

            if (plugins.hasPlugin('biz.aQute.bnd')) {
                project.natures += 'bndtools.core.bndnature'
                project.buildCommand 'bndtools.core.bndbuilder'
            }
        }
    }
    
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }

    jdt {
        file {
            withProperties { properties ->
                def formatterPrefs = new Properties()
                rootProject.file("gradle/org.eclipse.jdt.core.formatter.prefs")
                    .withInputStream { formatterPrefs.load(it) }
                properties.putAll(formatterPrefs)
            }
        }
    }
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.9.1')
        }
    }
}
